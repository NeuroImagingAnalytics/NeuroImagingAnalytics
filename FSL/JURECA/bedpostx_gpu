#!/bin/bash

#   Copyright (C) 2004 University of Oxford
#
#   SHCOPYRIGHT
# Modified by Rajalekshmi Deepu, Simulation Lab for Neuroscience, JSC, FZJ in 2016

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${FSLDIR}/lib

Usage() {
    echo ""
    echo "Usage: bedpostx <subject_directory> [options]"
    echo ""
    echo "expects to find bvals and bvecs in subject directory"
    echo "expects to find data and nodif_brain_mask in subject directory"
    echo "expects to find grad_dev in subject directory, if -g is set"
    echo ""
    echo "<options>:"
    #echo "-QSYS (Queue System, 0 use fsl_sub: FMRIB, 1 TORQUE (default): WashU)"
    echo "-Q (name of the GPU(s) queue, default cuda.q (defined in environment variable: FSLGECUDAQ)"
    #echo "-Q (name of the GPU(s) queue, default cuda.q for QSYS=0 and no queue for QSYS=1)"	
    echo "-NJOBS (number of jobs to queue, the data is divided in NJOBS parts, usefull for a GPU cluster, default 4)"
    echo "-n (number of fibres per voxel, default 3)"
    echo "-w (ARD weight, more weight means less secondary fibres per voxel, default 1)"
    echo "-b (burnin period, default 1000)"
    echo "-j (number of jumps, default 1250)"
    echo "-s (sample every, default 25)"
    echo "-model (Deconvolution model. 1: with sticks, 2: with sticks with a range of diffusivities (default), 3: with zeppelins)"
    echo "-g (consider gradient nonlinearities, default off)"
    echo ""
    echo ""
    echo "ALTERNATIVELY: you can pass on xfibres options onto directly bedpostx"
    echo " For example:  bedpostx <subject directory> --noard --cnonlinear"
    echo " Type 'xfibres --help' for a list of available options "
    echo " Default options will be bedpostx default (see above), and not xfibres default."
    echo ""
    echo "Note: Use EITHER old OR new syntax."
    exit 1
}

monitor(){
    cat <<EOM > ${subjdir}.bedpostX/monitor
#!/bin/sh
nparts=0
if [ $njobs -eq 1 ]; then
#1 part (GPU) and several subparts
#voxels processed in each subpart are 12800 or more if the last one is less than 6400 (1 part less)
	nparts=\$(($nvox/12800))
	if [ \$nparts%12800 != 0 ];then 
		nparts=\$((\$nparts + 1)) 
	fi
	last_part=\$(($nvox-(((\$nparts-1))*12800)))
	if [ \$last_part -lt 6400 ];then 
		nparts=\$((\$nparts - 1)) 
	fi
else
	nparts=$njobs
fi

echo
echo "----- Bedpostx Monitor -----"
finished=0
lastprinted=0
havedad=2
while [ \$finished -eq 0 ] ; do
    nfin=0
    part=0
    errorFiles=\`ls ${subjdir}.bedpostX/logs/*.e* 2> /dev/null \`
    for errorFile in \$errorFiles
    do
        if [ -s \$errorFile ]; then
            echo An error ocurred. Please check file \$errorFile
            kill -9 $$
            exit 1
        fi
    done
    while [ \$part -le \$nparts ];do
        if [ -e ${subjdir}.bedpostX/logs/monitor/\$part ]; then
            nfin=\$((\$nfin + 1))
        fi
        part=\$((\$part + 1))
    done
    newmessages=\$((\$nfin - \$lastprinted))
    while [ "\$newmessages" -gt 0 ];do
        lastprinted=\$((\$lastprinted + 1))
        echo \$lastprinted parts processed out of \$nparts
        newmessages=\$((\$newmessages - 1))
    done
    if [ -f ${subjdir}.bedpostX/xfms/eye.mat ] ; then
        finished=1
        echo "All parts processed"
	exit 
    fi
    if [ ! \$havedad -gt 0 ]; then
       exit 0
    fi
    if [ "x$SLURM_JOB_ID" = "x" ]; then
        havedad=\`ps -e -o pid 2>&1| grep "$$\\b" | wc -l\`
    fi
    sleep 50;
done
EOM
    chmod +x ${subjdir}.bedpostX/monitor
}

# function which creates a slurm submission script for the pre-processing part
pre-proc-sub(){
    cat <<EOPRE > ${subjdir}.bedpostX/pre-proc-sub.sh
#!/bin/bash -x  
#SBATCH --job-name=bedpostx_preproc_gpu                                                                            
#SBATCH --nodes=1     
#SBATCH --ntasks-per-node=24
#SBATCH --time=02:00:00
#SBATCH --partition=gpus
#SBATCH --gres=gpu:1
#SBATCH --output=${subjdir}.bedpostX/logs/pre-proc-out.%j
#SBATCH --error=${subjdir}.bedpostX/logs/pre-proc-err.%j
                                                                                                         
date
srun -n1 --gres=gpu:1 preproc_command &
wait
date

EOPRE
      chmod +x ${subjdir}.bedpostX/pre-proc-sub.sh
}

# function which creates a slurm submission script for the parallel-processing part  
para-proc-sub(){
    cat <<EOPA > ${subjdir}.bedpostX/para-proc-sub.sh 
#!/bin/bash -x                                                                                                                                     
#SBATCH --job-name=bedpostx_paraproc_gpu                                                                                                           
#SBATCH --nodes=1                                                                                                                                  
#SBATCH --ntasks-per-node=24                                                                                                                       
#SBATCH --time=06:00:00                                                                                                                            
#SBATCH --partition=gpus                                                                                                                           
#SBATCH --gres=gpu:4                                                                                                                               
#SBATCH --output=${subjdir}.bedpostX/logs/para-proc-out.%j
#SBATCH --error=${subjdir}.bedpostX/logs/para-proc-err.%j

date

EOPA
    chmod +x ${subjdir}.bedpostX/para-proc-sub.sh
}

# function which creates a slurm submission script for the post-processing part
post-proc-sub(){
    cat <<EOPST > ${subjdir}.bedpostX/post-proc-sub.sh
#!/bin/bash -x
#SBATCH --job-name=bedpostx_postproc_gpu
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=24
#SBATCH --time=06:00:00 
#SBATCH --partition=gpus
#SBATCH --gres=gpu:1 
#SBATCH --output=${subjdir}.bedpostX/logs/post-proc-out.%j
#SBATCH --error=${subjdir}.bedpostX/logs/post-proc-err.%j

date 
srun -n1 --gres=gpu:1 postproc_command &                                                                                                                                                    
wait
date
                                                                                                                                                                                                                
EOPST
    chmod +x ${subjdir}.bedpostX/post-proc-sub.sh
}



insert_in_sbatch_script (){
   # $* or $@ refer to all arguments passed to script
    pre_command1=$*
    echo $pre_command1
    inplace_insert_variable ${subjdir}.bedpostX/pre-proc-sub.sh  "preproc_command" "$pre_command1"
    
}

insert_in_sbatch_script_post (){
   # $* or $@ refer to all arguments passed to script                                                                                                                                                            
    post_command1=$*
    echo $post_command1
    inplace_insert_variable ${subjdir}.bedpostX/post-proc-sub.sh  "postproc_command" "$post_command1"

}

insert_in_para_sbatch_script (){
   # $* or $@ refer to all arguments passed to script                                                                                               
    para_command1=$*
    echo $para_command1
    args=$#
    n=`expr "$args" - 2`
    narg=${!n}
    echo $narg
    #create an output log file for each data part execution
    touch ${subjdir}.bedpostX/logs/para-proc-data$narg.log
    #srun $para_command1 -o ${subjdir}.bedpostX/logs/para-proc-data$narg.log & 
    cat <<EOF >> ${subjdir}.bedpostX/para-proc-sub.sh 
srun -n1 --gres=gpu:1 $para_command1 & 
EOF

}


inplace_insert_variable () {
# Parses all occurances of string $2 in file $1 by string $3; Uses cat, sed and move

    FILE_PATH=$1
    SEARCH_STRING=$2
    REPLACE_STRING=$3

    # Use a temp file                                                                   
    cat $FILE_PATH      | sed "s|$SEARCH_STRING|$REPLACE_STRING|g" > $FILE_PATH".temp"; mv $FILE_PATH".temp" $FILE_PATH
}

make_absolute(){
    dir=$1;
    if [ -d ${dir} ]; then
	OLDWD=`pwd`
	cd ${dir}
	dir_all=`pwd`
	cd $OLDWD
    else
	dir_all=${dir}
    fi
    echo ${dir_all}
}

[ "$1" = "" ] && Usage

subjdir=`make_absolute $1`
subjdir=`echo $subjdir | sed 's/\/$/$/g'`

echo "---------------------------------------------"
echo "------------ BedpostX GPU Version -----------"
echo "---------------------------------------------"
echo subjectdir is $subjdir

#parse option arguments
qsys=0
njobs=4
nfibres=3
fudge=1
burnin=1000
njumps=1250
sampleevery=25
model=2
gflag=0
other=""
queue=""

shift
while [ ! -z "$1" ]
do
  case "$1" in
      -QSYS) qsys=$2;shift;;
      -Q) queue="-q $2";shift;;
      -NJOBS) njobs=$2;shift;;
      -n) nfibres=$2;shift;;
      -w) fudge=$2;shift;;
      -b) burnin=$2;shift;;
      -j) njumps=$2;shift;;
      -s) sampleevery=$2;shift;;
      -model) model=$2;shift;;
      -g) gflag=1;; 
      *) other=$other" "$1;;
  esac
  shift
done
opts="--nf=$nfibres --fudge=$fudge --bi=$burnin --nj=$njumps --se=$sampleevery --model=$model"
defopts="--cnonlinear"
opts="$opts $defopts $other"

#check that all required files exist

if [ ! -d $subjdir ]; then
	echo "subject directory $1 not found"
	exit 1
fi

if [ ! -e ${subjdir}/bvecs ]; then
    if [ -e ${subjdir}/bvecs.txt ]; then
	mv ${subjdir}/bvecs.txt ${subjdir}/bvecs
    else
	echo "${subjdir}/bvecs not found"
	exit 1
    fi
fi

if [ ! -e ${subjdir}/bvals ]; then
    if [ -e ${subjdir}/bvals.txt ]; then
	mv ${subjdir}/bvals.txt ${subjdir}/bvals
    else
	echo "${subjdir}/bvals not found"
	exit 1
    fi
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/data` -eq 0 ]; then
	echo "${subjdir}/data not found"
	exit 1
fi

if [ ${gflag} -eq 1 ]; then
    if [ `${FSLDIR}/bin/imtest ${subjdir}/grad_dev` -eq 0 ]; then
	echo "${subjdir}/grad_dev not found"
	exit 1
    fi
fi

if [ `${FSLDIR}/bin/imtest ${subjdir}/nodif_brain_mask` -eq 0 ]; then
	echo "${subjdir}/nodif_brain_mask not found"
	exit 1
fi

if [ -e ${subjdir}.bedpostX/xfms/eye.mat ]; then
	echo "${subjdir} has already been processed: ${subjdir}.bedpostX." 
	echo "Delete or rename ${subjdir}.bedpostX before repeating the process."
	exit 1
fi

echo Making bedpostx directory structure

mkdir -p ${subjdir}.bedpostX/
mkdir -p ${subjdir}.bedpostX/diff_parts
mkdir -p ${subjdir}.bedpostX/logs
mkdir -p ${subjdir}.bedpostX/logs/logs_gpu
mkdir -p ${subjdir}.bedpostX/logs/monitor
rm -f ${subjdir}.bedpostX/logs/monitor/*
mkdir -p ${subjdir}.bedpostX/xfms

echo Copying files to bedpost directory

cp ${subjdir}/bvecs ${subjdir}/bvals ${subjdir}.bedpostX
${FSLDIR}/bin/imcp ${subjdir}/nodif_brain_mask ${subjdir}.bedpostX
if [ `${FSLDIR}/bin/imtest ${subjdir}/nodif` = 1 ] ; then
    ${FSLDIR}/bin/fslmaths ${subjdir}/nodif -mas ${subjdir}/nodif_brain_mask ${subjdir}.bedpostX/nodif_brain
fi


# Split the dataset in parts 
echo Pre-processing stage

if [ ${gflag} -eq 1 ]; then
	pre_command="$FSLDIR/bin/split_parts_gpu ${subjdir}/data ${subjdir}/nodif_brain_mask ${subjdir}/grad_dev 1 $njobs ${subjdir}.bedpostX"
else
	pre_command="$FSLDIR/bin/split_parts_gpu ${subjdir}/data ${subjdir}/nodif_brain_mask NULL 0 $njobs ${subjdir}.bedpostX"
fi
 
pre-proc-sub
insert_in_sbatch_script ${pre_command}
#Getting the slurm job id for the pre-processing job
pre_proc_slurm_jobid=`exec sbatch ${subjdir}.bedpostX/pre-proc-sub.sh | awk '{print $4}' &`
echo Pre processing job id is $pre_proc_slurm_jobid

#Compute number of voxels
nvox=`${FSLDIR}/bin/fslstats $subjdir.bedpostX/nodif_brain_mask -V  | cut -d ' ' -f1 `
echo $nvox > ${subjdir}.bedpostX/logs/numvoxels.txt
echo Queuing parallel processing stage

#Compute local model
part=0
while [ $part -lt $njobs ]
do
    	partzp=`$FSLDIR/bin/zeropad $part 4`
    
	if [ ${gflag} -eq 1 ]; then
	    gopts="$opts --gradnonlin=${subjdir}.bedpostX/grad_dev_$part"
	else
	    gopts=$opts
	fi    
   
     
        echo "${FSLDIR}/bin/xfibres_gpu --data=${subjdir}.bedpostX/data_$part --mask=$subjdir.bedpostX/nodif_brain_mask -b ${subjdir}.bedpostX/bvals -r ${subjdir}.bedpostX/bvecs --forcedir --logdir=$subjdir.bedpostX/diff_parts/data_part_$partzp $gopts ${subjdir} $part $njobs $nvox" >> ${subjdir}.bedpostX/commands.txt
    	part=$(($part + 1))
done

taskfile=${subjdir}.bedpostX/commands.txt
#Assigning the total number of tasks in the command text file to a variable
tasks=`wc -l $taskfile | awk '{print $1}'`
#function call to initialise the sbatch script for parallel processing 
para-proc-sub
j=1+$tasks
for i in `seq $tasks`
    do
       #each command in the txt file is assigning to a variable 
       para_command=`head -n $(($j-$i))   ${subjdir}.bedpostX/commands.txt | tail -1`
       insert_in_para_sbatch_script ${para_command}
    done
    cat <<EOF >> ${subjdir}.bedpostX/para-proc-sub.sh                                                                                                      
wait
date                                                                                                                                       
EOF
 #Getting the slurm job id for the parallel-processing job to a variable; submitting the para-proc job only when pre-proc-job is completed successfully
para_proc_slurm_jobid=`exec sbatch --dependency=afterok:$pre_proc_slurm_jobid ${subjdir}.bedpostX/para-proc-sub.sh | awk '{print $4}' &`
echo Parallel processing job id is $para_proc_slurm_jobid

#echo Queuing post processing stage
post_command="${FSLDIR}/bin/bedpostx_postproc_gpu.sh --data=${subjdir}/data --mask=$subjdir.bedpostX/nodif_brain_mask -b ${subjdir}.bedpostX/bvals -r ${subjdir}.bedpostX/bvecs  --forcedir --logdir=$subjdir.bedpostX/diff_parts $gopts $nvox $njobs ${subjdir} ${FSLDIR}"
post-proc-sub
insert_in_sbatch_script_post ${post_command}
#Getting the slurm job id for the post-processing job                                                                                                                  
post_proc_slurm_jobid=`exec sbatch --dependency=afterok:$para_proc_slurm_jobid ${subjdir}.bedpostX/post-proc-sub.sh | awk '{print $4}' &`
echo Post processing job id is $post_proc_slurm_jobid


echo $post_proc_slurm_jobid > ${subjdir}.bedpostX/logs/postproc_ID



